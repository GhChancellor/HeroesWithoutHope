
@startuml

interface IFeatAttribute {
        getDescription(): String
        getMagnitude(): int
        getName(): String
}

enum BodyLocationENUM {
        NONE
        HEAD
        BODY
        LEFT_ARM
        RIGHT_ARM
        LEFT_LEG
        RIGHT_LEG
}
class BodyLocationFeatModel {
        + getBodyLocation(): List<BodyLocationENUM>
        + setBodyLocation(value: List<BodyLocationENUM>): void
}
BodyLocationFeatModel --> BodyLocationENUM

class BodyLocationFeat {
        + BodyLocationFeat(model: BodyLocationFeatModel)
}
BodyLocationFeat --|> IFeatAttribute
BodyLocationFeat *-- BodyLocationFeatModel 

enum DurationENUM {
        MOMENTARY
        LIMITED
        EXTENDED
        UNLIMITED
}
class DurationFeatModel {
        + getDuration(): DurationENUM
        + setDuration(value: DurationENUM)
}
DurationFeatModel --> DurationENUM

class DurationFeat {
        + DurationFeat(model: DurationFeat)
}
DurationFeat --|> IFeatAttribute
DurationFeat *-- DurationFeatModel

class TargetFeatModel {
        + getArea(): AreaFeatModel
        + getDistance(): DistanceFeatModel

        + setArea(value: AreaFeatModel): void        
        + setDistance(value: DistanceFeatModel): void
}
TargetFeatModel *-- "1" DistanceFeatModel
TargetFeatModel *-- "0..1" AreaFeatModel

class TargetFeat {
        TargetFeat(model: TargetFeatModel)
}
TargetFeat --|> IFeatAttribute
TargetFeat *-- TargetFeatModel

enum DistanceTypeENUM {
        DEFINED
        CONTACT
        SENSORY
        LIMITLESS
}
class DistanceFeatModel  {
        + getDistanceMultiplier(): int
        + getDistanceType(): DistanceTypeENUM
        + getDistanceValue(): int
        + getNumberOfTarget(): int
        
        + setDistanceMultiplier(value: int): void
        + setDistanceType(value: DistanceTypeENUM): void
        + setDistanceValue(value: int): void
        + setNumberOfTarget(value: int): void
}
DistanceFeatModel --> DistanceTypeENUM

enum AreaTypeENUM {
        DEFINED
        SENSORY
}
class AreaFeatModel {
        + getAreaMultiplier(): int
        + getAreaType(): AreaTypeENUM
        + getExcludedTarget(): int

        + setAreaMultiplier(value: int): void
        + setAreaType(value: AreaTypeENUM): void
        + setExcludedTarget(value: int): void
}
AreaFeatModel --> AreaTypeENUM



enum CharacterFeatENUM {
        QUICKNESS
        MAGIC
        INTELLECT
        PSYCHE
        AGILITY
        FORCE
}
class CharacterFeatBonus {
        + getCharacterFeat(): CharacterFeatENUM
        + getValue():  int
        + setCharacterFeat(characterFeat: CharacterFeatENUM): void
        + setValue(value:  int): void
}
CharacterFeatBonus --> CharacterFeatENUM

enum CharacterAbilityENUM {
        RANGE
        PERCEPTION
        RELATIONSHIP
        CONTACTS
        CULTURE
        SCIENCE
        DEXTERITY
        PHYSICALITY
        MELEE
}
class CharacterAbilityBonus {
        + getCharacterAbility(): CharacterAbilityENUM
        + getValue():  int
        + setCharacterFeat(characterAbility: CharacterAbilityENUM): void
        + setValue(value:  int): void
}
CharacterAbilityBonus --> CharacterAbilityENUM

class BonusFeatModel {
        + getCharacterAbilities(): List<CharacterAbilityBonus>
        + getCharacterFeats(): List<CharacterFeatBonus>
        + setCharacterAbilities(characterAbilities: List<CharacterAbilityBonus>): void
        + setCharacterFeats(characterFeats: List<CharacterFeatBonus>): void
}
BonusFeatModel *-- "*" CharacterAbilityBonus
BonusFeatModel *-- "*" CharacterFeatBonus

class BonusFeat {
        + BonusFeat(model: BonusFeatModel)
}
BonusFeat --|> IFeatAttribute
BonusFeat *-- BonusFeatModel


enum InfluenceTypeENUM {
        NONE
        MYSTICAL
        PSYCHIC
}
enum DamageTypeENUM {
        BASE
        DEBILITATING
        INCAPACITATING
        STUN
        EXTENDED
        PERSISTENT
        FLURRY
}
class DamageModel {
        + getDamageTypes(): List<DamageTypeENUM>
        + getInfluenceType(): InfluenceTypeENUM

        + setDamageTypes(damageTypes: List<DamageTypeENUM>)
        + setInfluenceType(value: InfluenceTypeENUM)
}
DamageModel --> InfluenceTypeENUM
DamageModel --> DamageTypeENUM

enum CombatTypeENUM {
        NONE
        CONFRONTATION
        DEFENSIVE
        OFFENSIVE
}
class CombatFeatModel {
        + getCombatType(): CombatTypeENUM
        + getDamageModel(): DamageModel
        + setCombatType(value: CombatTypeENUM): void
        + setDamageModel(value: DamageModel): void 
}
CombatFeatModel --> CombatTypeENUM
CombatFeatModel *-- "0..1" DamageModel

class CombatFeat {
        + constructor(model: CombatFeatModel)
}
CombatFeat --|> IFeatAttribute
CombatFeat *-- CombatFeatModel

class MovementFeatModel {
        + getFollow(): boolean
        + getMultiplier(): int
        + getValue(): int
        
        + setFollow(value: boolean)
        + setMultiplier(value: int)
        + setValue(value: int)
}
class MovementFeat {
        + MovementFeat(model: MovementFeatModel)
}
MovementFeat --|> IFeatAttribute
MovementFeat *-- MovementFeatModel


class EditorFeatModel {
        + getValue(): int
        + setValue(value: int)
}
class EditorFeat {
        + EditorFeat(model: EditorFeat)
}

EditorFeat --|> IFeatAttribute
EditorFeat *-- EditorFeatModel

@enduml
