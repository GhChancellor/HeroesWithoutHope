
@startuml

interface IFeatAttribute {
        getDescription(): String
        getMagnitude(): int
        getName(): String
}

enum BodyLocationENUM {
        NONE
        HEAD
        BODY
        LEFT_ARM
        RIGHT_ARM
        LEFT_LEG
        RIGHT_LEG
}
class BodyLocationFeat {
        getBodyLocation(): BodyLocationENUM
        setBodyLocation(value: BodyLocationENUM): void
}
BodyLocationFeat --> BodyLocationENUM
BodyLocationFeat --|> IFeatAttribute

enum DurationENUM {
        MOMENTARY
        LIMITED
        EXTENDED
        UNLIMITED
}
class DurationFeat {
        getDuration(): DurationENUM
        setDuration(value: DurationENUM)
}
DurationFeat --> DurationENUM
DurationFeat --|> IFeatAttribute

class TargetFeat {
        getArea: AreaFeat
        getDistance(): DistanceFeat
        getNumberOfTarget(): int

        setArea(value: AreaFeat): void        
        setDistance(value: DistanceFeat): void
        setNumberOfTarget(value: int): void
}
TargetFeat --|> IFeatAttribute
TargetFeat *-- "1" DistanceFeat
TargetFeat *-- "0..1" AreaFeat

enum DistanceTypeENUM {
        DEFINED
        CONTACT
        SENSORY
        LIMITLESS
}
class DistanceFeat  {
        getDistanceMultiplier(): int
        getDistanceType(): DistanceTypeENUM
        getDistanceValue(): int
        
        setDistanceMultiplier(value: int): void
        setDistanceType(value: DistanceTypeENUM): void
        setDistanceValue(value: int): void
}
DistanceFeat --|> IFeatAttribute
DistanceFeat --> DistanceTypeENUM

enum AreaTypeENUM {
        DEFINED
        SENSORY
}
class AreaFeat {
        getAreaMultiplier(): int
        getAreaType(): AreaTypeENUM
        getExcludedTarget(): int

        setAreaMultiplier(value: int): void
        setAreaType(value: AreaTypeENUM): void
        setExcludedTarget(value: int): void
}
AreaFeat --|> IFeatAttribute
AreaFeat --> AreaTypeENUM


class BonusFeat {
        + getValue(): int
        + setValue(value: int): void
}
BonusFeat --|> IFeatAttribute

enum CharacterFeatENUM {
        QUICKNESS
        MAGIC
        INTELLECT
        PSYCHE
        AGILITY
        FORCE
}
enum CharacterAbilityENUM {
        RANGE
        PERCEPTION
        RELATIONSHIP
        CONTACTS
        CULTURE
        SCIENCE
        DEXTERITY
        PHYSICALITY
        MELEE
}
class SuccessBonusFeat {
        + getCharacterFeat(): CharacterFeatENUM
        + setCharacterFeat(): void
}
SuccessBonusFeat --> CharacterFeatENUM
SuccessBonusFeat -|> BonusFeat

class PotentialBonusFeat {
        + getCharacterAbility(): CharacterAbilityENUM
        + setCharacterAbility(): void
}
PotentialBonusFeat --> CharacterAbilityENUM
PotentialBonusFeat -|> BonusFeat

enum CombatTypeENUM {
        NONR
        CONFRONTATION
        DEFENSIVE
        OFFENSIVE
}
class CombatFeat {
        + getCombatType(): CombatTypeENUM
        + setCombatType(value: CombatTypeENUM): void 
}
CombatFeat --|> IFeatAttribute
CombatFeat --> CombatTypeENUM

enum InfluenceTypeENUM {
        NONE
        MYSTICAL
        PSYCHIC
}
enum DamageTypeENUM {
        BASE
        DEBILITATING
        INCAPACITATING
        STUN
        EXTENDED
        PERSISTENT
        FLURRY
}
class AttackFeat {
        + getDamageTypes(): List<DamageTypeENUM>
        + getInfluenceType(): InfluenceTypeENUM

        + setDamageTypes(damageTypes: List<DamageTypeENUM>)
        + setInfluenceType(value: InfluenceTypeENUM)
}
AttackFeat --|> IFeatAttribute
AttackFeat --> InfluenceTypeENUM
AttackFeat --> DamageTypeENUM

class MovementFeat {
        + getFollow(): boolean
        + getMultiplier(): int
        + getValue(): int
        
        + setFollow(value: boolean)
        + setMultiplier(value: int)
        + setValue(value: int)
}
MovementFeat --|> IFeatAttribute

class EditorFeat {
        + getValue(): int
        + setValue(value: int)
}
EditorFeat --|> IFeatAttribute

@enduml
